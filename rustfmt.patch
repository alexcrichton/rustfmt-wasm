diff --git a/src/formatting.rs b/src/formatting.rs
index 3012837..6fced9a 100644
--- a/src/formatting.rs
+++ b/src/formatting.rs
@@ -64,7 +64,7 @@ fn format_project<T: FormatHandler>(
     config: &Config,
     handler: &mut T,
 ) -> Result<FormatReport, ErrorKind> {
-    let mut timer = Timer::Initialized(Instant::now());
+    // let mut timer = Timer::Initialized(Instant::now());
 
     let main_file = input.file_name();
     let input_is_stdin = main_file == FileName::Stdin;
@@ -74,7 +74,7 @@ fn format_project<T: FormatHandler>(
     let mut parse_session = make_parse_sess(source_map.clone(), config);
     let mut report = FormatReport::new();
     let krate = parse_crate(input, &parse_session, config, &mut report)?;
-    timer = timer.done_parsing();
+    // timer = timer.done_parsing();
 
     // Suppress error output if we have to do any further parsing.
     let silent_emitter = silent_emitter(source_map);
@@ -91,15 +91,15 @@ fn format_project<T: FormatHandler>(
         let is_root = path == main_file;
         context.format_file(path, module, is_root)?;
     }
-    timer = timer.done_formatting();
-
-    should_emit_verbose(input_is_stdin, config, || {
-        println!(
-            "Spent {0:.3} secs in the parsing phase, and {1:.3} secs in the formatting phase",
-            timer.get_parse_time(),
-            timer.get_format_time(),
-        )
-    });
+    // timer = timer.done_formatting();
+
+    // should_emit_verbose(input_is_stdin, config, || {
+    //     println!(
+    //         "Spent {0:.3} secs in the parsing phase, and {1:.3} secs in the formatting phase",
+    //         timer.get_parse_time(),
+    //         timer.get_format_time(),
+    //     )
+    // });
 
     Ok(context.report)
 }
